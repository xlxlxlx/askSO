<code>"CS 2110" =&gt; ("CS", 2110) # 0

"CS 2110 and INFO 3300" =&gt; [("CS", 2110), ("INFO", 3300)] # 1
"CS 2110, INFO 3300" =&gt; [("CS", 2110), ("INFO", 3300)] # 1
"CS 2110, 3300, 3140" =&gt; [("CS", 2110), ("CS", 3300), ("CS", 3140)] # 1

"CS 2110 or INFO 3300" =&gt; [[("CS", 2110)], [("INFO", 3300)]] # 2

"MATH 2210, 2230, 2310, or 2940" =&gt; [[("MATH", 2210), ("MATH", 2230), ("MATH", 2310)], [("MATH", 2940)]] # 3  
</code>
<code>def p_course(p):
 'course : DEPT_CODE COURSE_NUMBER'
 p[0] = (p[1], int(p[2]))
</code>
<code>parseString()</code>
<code> def addCourse(self, str, location, tokens):
  self.result.append((tokens[0][0], tokens[0][1]))

 def makeCourseList(self, str, location, tokens):

  dept = tokens[0][0]
  new_tokens = [(dept, tokens[0][1])]
  new_tokens.extend((dept, tok) for tok in tokens[1:])

  self.result.append(new_tokens)
</code>
<code>    def __init__(self):
            self.result = []
            # ...
  self.statement = (course_data + Optional(OR_CONJ + course_data)).setParseAction(self.disjunctionCourses)



 def disjunctionCourses(self, str, location, tokens):
  if len(tokens) == 1:
   return tokens

  print "disjunction tokens: %s" % tokens
</code>
<code>disjunctionCourses()</code>
<code>result</code>
<code>result</code>
<code>token</code>
<code>result</code>
<code>"CS 2110 or permission of instructor"
"INFO 3140 or equivalent experience"
"PYSCH 2210 and sophomore standing"
</code>